// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/model"
	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processconsumer/handler"
	"github.com/google/uuid"
)

type FakeProcessStore struct {
	GetProcessByIDStub        func(context.Context, uuid.UUID) (model.ProcessRun, error)
	getProcessByIDMutex       sync.RWMutex
	getProcessByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getProcessByIDReturns struct {
		result1 model.ProcessRun
		result2 error
	}
	getProcessByIDReturnsOnCall map[int]struct {
		result1 model.ProcessRun
		result2 error
	}
	GetProcessLogsStub        func(context.Context, uuid.UUID) ([]model.ProcessLog, error)
	getProcessLogsMutex       sync.RWMutex
	getProcessLogsArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getProcessLogsReturns struct {
		result1 []model.ProcessLog
		result2 error
	}
	getProcessLogsReturnsOnCall map[int]struct {
		result1 []model.ProcessLog
		result2 error
	}
	ListRunningProcessesStub        func(context.Context) ([]model.ProcessRun, error)
	listRunningProcessesMutex       sync.RWMutex
	listRunningProcessesArgsForCall []struct {
		arg1 context.Context
	}
	listRunningProcessesReturns struct {
		result1 []model.ProcessRun
		result2 error
	}
	listRunningProcessesReturnsOnCall map[int]struct {
		result1 []model.ProcessRun
		result2 error
	}
	UpdateProcessStatusStub        func(context.Context, uuid.UUID, model.ProcessStatus) error
	updateProcessStatusMutex       sync.RWMutex
	updateProcessStatusArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 model.ProcessStatus
	}
	updateProcessStatusReturns struct {
		result1 error
	}
	updateProcessStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessStore) GetProcessByID(arg1 context.Context, arg2 uuid.UUID) (model.ProcessRun, error) {
	fake.getProcessByIDMutex.Lock()
	ret, specificReturn := fake.getProcessByIDReturnsOnCall[len(fake.getProcessByIDArgsForCall)]
	fake.getProcessByIDArgsForCall = append(fake.getProcessByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetProcessByIDStub
	fakeReturns := fake.getProcessByIDReturns
	fake.recordInvocation("GetProcessByID", []interface{}{arg1, arg2})
	fake.getProcessByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessStore) GetProcessByIDCallCount() int {
	fake.getProcessByIDMutex.RLock()
	defer fake.getProcessByIDMutex.RUnlock()
	return len(fake.getProcessByIDArgsForCall)
}

func (fake *FakeProcessStore) GetProcessByIDCalls(stub func(context.Context, uuid.UUID) (model.ProcessRun, error)) {
	fake.getProcessByIDMutex.Lock()
	defer fake.getProcessByIDMutex.Unlock()
	fake.GetProcessByIDStub = stub
}

func (fake *FakeProcessStore) GetProcessByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getProcessByIDMutex.RLock()
	defer fake.getProcessByIDMutex.RUnlock()
	argsForCall := fake.getProcessByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessStore) GetProcessByIDReturns(result1 model.ProcessRun, result2 error) {
	fake.getProcessByIDMutex.Lock()
	defer fake.getProcessByIDMutex.Unlock()
	fake.GetProcessByIDStub = nil
	fake.getProcessByIDReturns = struct {
		result1 model.ProcessRun
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) GetProcessByIDReturnsOnCall(i int, result1 model.ProcessRun, result2 error) {
	fake.getProcessByIDMutex.Lock()
	defer fake.getProcessByIDMutex.Unlock()
	fake.GetProcessByIDStub = nil
	if fake.getProcessByIDReturnsOnCall == nil {
		fake.getProcessByIDReturnsOnCall = make(map[int]struct {
			result1 model.ProcessRun
			result2 error
		})
	}
	fake.getProcessByIDReturnsOnCall[i] = struct {
		result1 model.ProcessRun
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) GetProcessLogs(arg1 context.Context, arg2 uuid.UUID) ([]model.ProcessLog, error) {
	fake.getProcessLogsMutex.Lock()
	ret, specificReturn := fake.getProcessLogsReturnsOnCall[len(fake.getProcessLogsArgsForCall)]
	fake.getProcessLogsArgsForCall = append(fake.getProcessLogsArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetProcessLogsStub
	fakeReturns := fake.getProcessLogsReturns
	fake.recordInvocation("GetProcessLogs", []interface{}{arg1, arg2})
	fake.getProcessLogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessStore) GetProcessLogsCallCount() int {
	fake.getProcessLogsMutex.RLock()
	defer fake.getProcessLogsMutex.RUnlock()
	return len(fake.getProcessLogsArgsForCall)
}

func (fake *FakeProcessStore) GetProcessLogsCalls(stub func(context.Context, uuid.UUID) ([]model.ProcessLog, error)) {
	fake.getProcessLogsMutex.Lock()
	defer fake.getProcessLogsMutex.Unlock()
	fake.GetProcessLogsStub = stub
}

func (fake *FakeProcessStore) GetProcessLogsArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getProcessLogsMutex.RLock()
	defer fake.getProcessLogsMutex.RUnlock()
	argsForCall := fake.getProcessLogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessStore) GetProcessLogsReturns(result1 []model.ProcessLog, result2 error) {
	fake.getProcessLogsMutex.Lock()
	defer fake.getProcessLogsMutex.Unlock()
	fake.GetProcessLogsStub = nil
	fake.getProcessLogsReturns = struct {
		result1 []model.ProcessLog
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) GetProcessLogsReturnsOnCall(i int, result1 []model.ProcessLog, result2 error) {
	fake.getProcessLogsMutex.Lock()
	defer fake.getProcessLogsMutex.Unlock()
	fake.GetProcessLogsStub = nil
	if fake.getProcessLogsReturnsOnCall == nil {
		fake.getProcessLogsReturnsOnCall = make(map[int]struct {
			result1 []model.ProcessLog
			result2 error
		})
	}
	fake.getProcessLogsReturnsOnCall[i] = struct {
		result1 []model.ProcessLog
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) ListRunningProcesses(arg1 context.Context) ([]model.ProcessRun, error) {
	fake.listRunningProcessesMutex.Lock()
	ret, specificReturn := fake.listRunningProcessesReturnsOnCall[len(fake.listRunningProcessesArgsForCall)]
	fake.listRunningProcessesArgsForCall = append(fake.listRunningProcessesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.ListRunningProcessesStub
	fakeReturns := fake.listRunningProcessesReturns
	fake.recordInvocation("ListRunningProcesses", []interface{}{arg1})
	fake.listRunningProcessesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessStore) ListRunningProcessesCallCount() int {
	fake.listRunningProcessesMutex.RLock()
	defer fake.listRunningProcessesMutex.RUnlock()
	return len(fake.listRunningProcessesArgsForCall)
}

func (fake *FakeProcessStore) ListRunningProcessesCalls(stub func(context.Context) ([]model.ProcessRun, error)) {
	fake.listRunningProcessesMutex.Lock()
	defer fake.listRunningProcessesMutex.Unlock()
	fake.ListRunningProcessesStub = stub
}

func (fake *FakeProcessStore) ListRunningProcessesArgsForCall(i int) context.Context {
	fake.listRunningProcessesMutex.RLock()
	defer fake.listRunningProcessesMutex.RUnlock()
	argsForCall := fake.listRunningProcessesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeProcessStore) ListRunningProcessesReturns(result1 []model.ProcessRun, result2 error) {
	fake.listRunningProcessesMutex.Lock()
	defer fake.listRunningProcessesMutex.Unlock()
	fake.ListRunningProcessesStub = nil
	fake.listRunningProcessesReturns = struct {
		result1 []model.ProcessRun
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) ListRunningProcessesReturnsOnCall(i int, result1 []model.ProcessRun, result2 error) {
	fake.listRunningProcessesMutex.Lock()
	defer fake.listRunningProcessesMutex.Unlock()
	fake.ListRunningProcessesStub = nil
	if fake.listRunningProcessesReturnsOnCall == nil {
		fake.listRunningProcessesReturnsOnCall = make(map[int]struct {
			result1 []model.ProcessRun
			result2 error
		})
	}
	fake.listRunningProcessesReturnsOnCall[i] = struct {
		result1 []model.ProcessRun
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessStore) UpdateProcessStatus(arg1 context.Context, arg2 uuid.UUID, arg3 model.ProcessStatus) error {
	fake.updateProcessStatusMutex.Lock()
	ret, specificReturn := fake.updateProcessStatusReturnsOnCall[len(fake.updateProcessStatusArgsForCall)]
	fake.updateProcessStatusArgsForCall = append(fake.updateProcessStatusArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 model.ProcessStatus
	}{arg1, arg2, arg3})
	stub := fake.UpdateProcessStatusStub
	fakeReturns := fake.updateProcessStatusReturns
	fake.recordInvocation("UpdateProcessStatus", []interface{}{arg1, arg2, arg3})
	fake.updateProcessStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessStore) UpdateProcessStatusCallCount() int {
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	return len(fake.updateProcessStatusArgsForCall)
}

func (fake *FakeProcessStore) UpdateProcessStatusCalls(stub func(context.Context, uuid.UUID, model.ProcessStatus) error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = stub
}

func (fake *FakeProcessStore) UpdateProcessStatusArgsForCall(i int) (context.Context, uuid.UUID, model.ProcessStatus) {
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	argsForCall := fake.updateProcessStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProcessStore) UpdateProcessStatusReturns(result1 error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = nil
	fake.updateProcessStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) UpdateProcessStatusReturnsOnCall(i int, result1 error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = nil
	if fake.updateProcessStatusReturnsOnCall == nil {
		fake.updateProcessStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateProcessStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessByIDMutex.RLock()
	defer fake.getProcessByIDMutex.RUnlock()
	fake.getProcessLogsMutex.RLock()
	defer fake.getProcessLogsMutex.RUnlock()
	fake.listRunningProcessesMutex.RLock()
	defer fake.listRunningProcessesMutex.RUnlock()
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.ProcessStore = new(FakeProcessStore)
