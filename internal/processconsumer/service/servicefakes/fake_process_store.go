// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/model"
	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processconsumer/service"
	"github.com/google/uuid"
)

type FakeProcessStore struct {
	AppendProcessLogStub        func(context.Context, uuid.UUID, string) error
	appendProcessLogMutex       sync.RWMutex
	appendProcessLogArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}
	appendProcessLogReturns struct {
		result1 error
	}
	appendProcessLogReturnsOnCall map[int]struct {
		result1 error
	}
	InsertProcessStub        func(context.Context, model.ProcessRun) error
	insertProcessMutex       sync.RWMutex
	insertProcessArgsForCall []struct {
		arg1 context.Context
		arg2 model.ProcessRun
	}
	insertProcessReturns struct {
		result1 error
	}
	insertProcessReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateProcessStatusStub        func(context.Context, uuid.UUID, model.ProcessStatus) error
	updateProcessStatusMutex       sync.RWMutex
	updateProcessStatusArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 model.ProcessStatus
	}
	updateProcessStatusReturns struct {
		result1 error
	}
	updateProcessStatusReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessStore) AppendProcessLog(arg1 context.Context, arg2 uuid.UUID, arg3 string) error {
	fake.appendProcessLogMutex.Lock()
	ret, specificReturn := fake.appendProcessLogReturnsOnCall[len(fake.appendProcessLogArgsForCall)]
	fake.appendProcessLogArgsForCall = append(fake.appendProcessLogArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AppendProcessLogStub
	fakeReturns := fake.appendProcessLogReturns
	fake.recordInvocation("AppendProcessLog", []interface{}{arg1, arg2, arg3})
	fake.appendProcessLogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessStore) AppendProcessLogCallCount() int {
	fake.appendProcessLogMutex.RLock()
	defer fake.appendProcessLogMutex.RUnlock()
	return len(fake.appendProcessLogArgsForCall)
}

func (fake *FakeProcessStore) AppendProcessLogCalls(stub func(context.Context, uuid.UUID, string) error) {
	fake.appendProcessLogMutex.Lock()
	defer fake.appendProcessLogMutex.Unlock()
	fake.AppendProcessLogStub = stub
}

func (fake *FakeProcessStore) AppendProcessLogArgsForCall(i int) (context.Context, uuid.UUID, string) {
	fake.appendProcessLogMutex.RLock()
	defer fake.appendProcessLogMutex.RUnlock()
	argsForCall := fake.appendProcessLogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProcessStore) AppendProcessLogReturns(result1 error) {
	fake.appendProcessLogMutex.Lock()
	defer fake.appendProcessLogMutex.Unlock()
	fake.AppendProcessLogStub = nil
	fake.appendProcessLogReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) AppendProcessLogReturnsOnCall(i int, result1 error) {
	fake.appendProcessLogMutex.Lock()
	defer fake.appendProcessLogMutex.Unlock()
	fake.AppendProcessLogStub = nil
	if fake.appendProcessLogReturnsOnCall == nil {
		fake.appendProcessLogReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.appendProcessLogReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) InsertProcess(arg1 context.Context, arg2 model.ProcessRun) error {
	fake.insertProcessMutex.Lock()
	ret, specificReturn := fake.insertProcessReturnsOnCall[len(fake.insertProcessArgsForCall)]
	fake.insertProcessArgsForCall = append(fake.insertProcessArgsForCall, struct {
		arg1 context.Context
		arg2 model.ProcessRun
	}{arg1, arg2})
	stub := fake.InsertProcessStub
	fakeReturns := fake.insertProcessReturns
	fake.recordInvocation("InsertProcess", []interface{}{arg1, arg2})
	fake.insertProcessMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessStore) InsertProcessCallCount() int {
	fake.insertProcessMutex.RLock()
	defer fake.insertProcessMutex.RUnlock()
	return len(fake.insertProcessArgsForCall)
}

func (fake *FakeProcessStore) InsertProcessCalls(stub func(context.Context, model.ProcessRun) error) {
	fake.insertProcessMutex.Lock()
	defer fake.insertProcessMutex.Unlock()
	fake.InsertProcessStub = stub
}

func (fake *FakeProcessStore) InsertProcessArgsForCall(i int) (context.Context, model.ProcessRun) {
	fake.insertProcessMutex.RLock()
	defer fake.insertProcessMutex.RUnlock()
	argsForCall := fake.insertProcessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessStore) InsertProcessReturns(result1 error) {
	fake.insertProcessMutex.Lock()
	defer fake.insertProcessMutex.Unlock()
	fake.InsertProcessStub = nil
	fake.insertProcessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) InsertProcessReturnsOnCall(i int, result1 error) {
	fake.insertProcessMutex.Lock()
	defer fake.insertProcessMutex.Unlock()
	fake.InsertProcessStub = nil
	if fake.insertProcessReturnsOnCall == nil {
		fake.insertProcessReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertProcessReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) UpdateProcessStatus(arg1 context.Context, arg2 uuid.UUID, arg3 model.ProcessStatus) error {
	fake.updateProcessStatusMutex.Lock()
	ret, specificReturn := fake.updateProcessStatusReturnsOnCall[len(fake.updateProcessStatusArgsForCall)]
	fake.updateProcessStatusArgsForCall = append(fake.updateProcessStatusArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 model.ProcessStatus
	}{arg1, arg2, arg3})
	stub := fake.UpdateProcessStatusStub
	fakeReturns := fake.updateProcessStatusReturns
	fake.recordInvocation("UpdateProcessStatus", []interface{}{arg1, arg2, arg3})
	fake.updateProcessStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeProcessStore) UpdateProcessStatusCallCount() int {
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	return len(fake.updateProcessStatusArgsForCall)
}

func (fake *FakeProcessStore) UpdateProcessStatusCalls(stub func(context.Context, uuid.UUID, model.ProcessStatus) error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = stub
}

func (fake *FakeProcessStore) UpdateProcessStatusArgsForCall(i int) (context.Context, uuid.UUID, model.ProcessStatus) {
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	argsForCall := fake.updateProcessStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeProcessStore) UpdateProcessStatusReturns(result1 error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = nil
	fake.updateProcessStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) UpdateProcessStatusReturnsOnCall(i int, result1 error) {
	fake.updateProcessStatusMutex.Lock()
	defer fake.updateProcessStatusMutex.Unlock()
	fake.UpdateProcessStatusStub = nil
	if fake.updateProcessStatusReturnsOnCall == nil {
		fake.updateProcessStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateProcessStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcessStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appendProcessLogMutex.RLock()
	defer fake.appendProcessLogMutex.RUnlock()
	fake.insertProcessMutex.RLock()
	defer fake.insertProcessMutex.RUnlock()
	fake.updateProcessStatusMutex.RLock()
	defer fake.updateProcessStatusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.ProcessStore = new(FakeProcessStore)
