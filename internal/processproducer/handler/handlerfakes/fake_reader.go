// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/model"
	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processproducer/handler"
)

type FakeReader struct {
	ApplyTemplatingToTasksStub        func([]model.Task, map[string]string) ([]model.Task, error)
	applyTemplatingToTasksMutex       sync.RWMutex
	applyTemplatingToTasksArgsForCall []struct {
		arg1 []model.Task
		arg2 map[string]string
	}
	applyTemplatingToTasksReturns struct {
		result1 []model.Task
		result2 error
	}
	applyTemplatingToTasksReturnsOnCall map[int]struct {
		result1 []model.Task
		result2 error
	}
	GetProcessNameFromFileStub        func(string) (string, error)
	getProcessNameFromFileMutex       sync.RWMutex
	getProcessNameFromFileArgsForCall []struct {
		arg1 string
	}
	getProcessNameFromFileReturns struct {
		result1 string
		result2 error
	}
	getProcessNameFromFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ParseConfigFileStub        func(string) (model.ProcessDefinition, error)
	parseConfigFileMutex       sync.RWMutex
	parseConfigFileArgsForCall []struct {
		arg1 string
	}
	parseConfigFileReturns struct {
		result1 model.ProcessDefinition
		result2 error
	}
	parseConfigFileReturnsOnCall map[int]struct {
		result1 model.ProcessDefinition
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) ApplyTemplatingToTasks(arg1 []model.Task, arg2 map[string]string) ([]model.Task, error) {
	var arg1Copy []model.Task
	if arg1 != nil {
		arg1Copy = make([]model.Task, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.applyTemplatingToTasksMutex.Lock()
	ret, specificReturn := fake.applyTemplatingToTasksReturnsOnCall[len(fake.applyTemplatingToTasksArgsForCall)]
	fake.applyTemplatingToTasksArgsForCall = append(fake.applyTemplatingToTasksArgsForCall, struct {
		arg1 []model.Task
		arg2 map[string]string
	}{arg1Copy, arg2})
	stub := fake.ApplyTemplatingToTasksStub
	fakeReturns := fake.applyTemplatingToTasksReturns
	fake.recordInvocation("ApplyTemplatingToTasks", []interface{}{arg1Copy, arg2})
	fake.applyTemplatingToTasksMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) ApplyTemplatingToTasksCallCount() int {
	fake.applyTemplatingToTasksMutex.RLock()
	defer fake.applyTemplatingToTasksMutex.RUnlock()
	return len(fake.applyTemplatingToTasksArgsForCall)
}

func (fake *FakeReader) ApplyTemplatingToTasksCalls(stub func([]model.Task, map[string]string) ([]model.Task, error)) {
	fake.applyTemplatingToTasksMutex.Lock()
	defer fake.applyTemplatingToTasksMutex.Unlock()
	fake.ApplyTemplatingToTasksStub = stub
}

func (fake *FakeReader) ApplyTemplatingToTasksArgsForCall(i int) ([]model.Task, map[string]string) {
	fake.applyTemplatingToTasksMutex.RLock()
	defer fake.applyTemplatingToTasksMutex.RUnlock()
	argsForCall := fake.applyTemplatingToTasksArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReader) ApplyTemplatingToTasksReturns(result1 []model.Task, result2 error) {
	fake.applyTemplatingToTasksMutex.Lock()
	defer fake.applyTemplatingToTasksMutex.Unlock()
	fake.ApplyTemplatingToTasksStub = nil
	fake.applyTemplatingToTasksReturns = struct {
		result1 []model.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ApplyTemplatingToTasksReturnsOnCall(i int, result1 []model.Task, result2 error) {
	fake.applyTemplatingToTasksMutex.Lock()
	defer fake.applyTemplatingToTasksMutex.Unlock()
	fake.ApplyTemplatingToTasksStub = nil
	if fake.applyTemplatingToTasksReturnsOnCall == nil {
		fake.applyTemplatingToTasksReturnsOnCall = make(map[int]struct {
			result1 []model.Task
			result2 error
		})
	}
	fake.applyTemplatingToTasksReturnsOnCall[i] = struct {
		result1 []model.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetProcessNameFromFile(arg1 string) (string, error) {
	fake.getProcessNameFromFileMutex.Lock()
	ret, specificReturn := fake.getProcessNameFromFileReturnsOnCall[len(fake.getProcessNameFromFileArgsForCall)]
	fake.getProcessNameFromFileArgsForCall = append(fake.getProcessNameFromFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProcessNameFromFileStub
	fakeReturns := fake.getProcessNameFromFileReturns
	fake.recordInvocation("GetProcessNameFromFile", []interface{}{arg1})
	fake.getProcessNameFromFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetProcessNameFromFileCallCount() int {
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	return len(fake.getProcessNameFromFileArgsForCall)
}

func (fake *FakeReader) GetProcessNameFromFileCalls(stub func(string) (string, error)) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = stub
}

func (fake *FakeReader) GetProcessNameFromFileArgsForCall(i int) string {
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	argsForCall := fake.getProcessNameFromFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) GetProcessNameFromFileReturns(result1 string, result2 error) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = nil
	fake.getProcessNameFromFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetProcessNameFromFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = nil
	if fake.getProcessNameFromFileReturnsOnCall == nil {
		fake.getProcessNameFromFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getProcessNameFromFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ParseConfigFile(arg1 string) (model.ProcessDefinition, error) {
	fake.parseConfigFileMutex.Lock()
	ret, specificReturn := fake.parseConfigFileReturnsOnCall[len(fake.parseConfigFileArgsForCall)]
	fake.parseConfigFileArgsForCall = append(fake.parseConfigFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseConfigFileStub
	fakeReturns := fake.parseConfigFileReturns
	fake.recordInvocation("ParseConfigFile", []interface{}{arg1})
	fake.parseConfigFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) ParseConfigFileCallCount() int {
	fake.parseConfigFileMutex.RLock()
	defer fake.parseConfigFileMutex.RUnlock()
	return len(fake.parseConfigFileArgsForCall)
}

func (fake *FakeReader) ParseConfigFileCalls(stub func(string) (model.ProcessDefinition, error)) {
	fake.parseConfigFileMutex.Lock()
	defer fake.parseConfigFileMutex.Unlock()
	fake.ParseConfigFileStub = stub
}

func (fake *FakeReader) ParseConfigFileArgsForCall(i int) string {
	fake.parseConfigFileMutex.RLock()
	defer fake.parseConfigFileMutex.RUnlock()
	argsForCall := fake.parseConfigFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) ParseConfigFileReturns(result1 model.ProcessDefinition, result2 error) {
	fake.parseConfigFileMutex.Lock()
	defer fake.parseConfigFileMutex.Unlock()
	fake.ParseConfigFileStub = nil
	fake.parseConfigFileReturns = struct {
		result1 model.ProcessDefinition
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ParseConfigFileReturnsOnCall(i int, result1 model.ProcessDefinition, result2 error) {
	fake.parseConfigFileMutex.Lock()
	defer fake.parseConfigFileMutex.Unlock()
	fake.ParseConfigFileStub = nil
	if fake.parseConfigFileReturnsOnCall == nil {
		fake.parseConfigFileReturnsOnCall = make(map[int]struct {
			result1 model.ProcessDefinition
			result2 error
		})
	}
	fake.parseConfigFileReturnsOnCall[i] = struct {
		result1 model.ProcessDefinition
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyTemplatingToTasksMutex.RLock()
	defer fake.applyTemplatingToTasksMutex.RUnlock()
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	fake.parseConfigFileMutex.RLock()
	defer fake.parseConfigFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.Reader = new(FakeReader)
