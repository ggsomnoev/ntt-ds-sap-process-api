// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processproducer/handler"
)

type FakeProcessDefinitionStore struct {
	GetProcessPathByNameStub        func(context.Context, string) (string, error)
	getProcessPathByNameMutex       sync.RWMutex
	getProcessPathByNameArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getProcessPathByNameReturns struct {
		result1 string
		result2 error
	}
	getProcessPathByNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByName(arg1 context.Context, arg2 string) (string, error) {
	fake.getProcessPathByNameMutex.Lock()
	ret, specificReturn := fake.getProcessPathByNameReturnsOnCall[len(fake.getProcessPathByNameArgsForCall)]
	fake.getProcessPathByNameArgsForCall = append(fake.getProcessPathByNameArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetProcessPathByNameStub
	fakeReturns := fake.getProcessPathByNameReturns
	fake.recordInvocation("GetProcessPathByName", []interface{}{arg1, arg2})
	fake.getProcessPathByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByNameCallCount() int {
	fake.getProcessPathByNameMutex.RLock()
	defer fake.getProcessPathByNameMutex.RUnlock()
	return len(fake.getProcessPathByNameArgsForCall)
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByNameCalls(stub func(context.Context, string) (string, error)) {
	fake.getProcessPathByNameMutex.Lock()
	defer fake.getProcessPathByNameMutex.Unlock()
	fake.GetProcessPathByNameStub = stub
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByNameArgsForCall(i int) (context.Context, string) {
	fake.getProcessPathByNameMutex.RLock()
	defer fake.getProcessPathByNameMutex.RUnlock()
	argsForCall := fake.getProcessPathByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByNameReturns(result1 string, result2 error) {
	fake.getProcessPathByNameMutex.Lock()
	defer fake.getProcessPathByNameMutex.Unlock()
	fake.GetProcessPathByNameStub = nil
	fake.getProcessPathByNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessDefinitionStore) GetProcessPathByNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getProcessPathByNameMutex.Lock()
	defer fake.getProcessPathByNameMutex.Unlock()
	fake.GetProcessPathByNameStub = nil
	if fake.getProcessPathByNameReturnsOnCall == nil {
		fake.getProcessPathByNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getProcessPathByNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeProcessDefinitionStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessPathByNameMutex.RLock()
	defer fake.getProcessPathByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProcessDefinitionStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.ProcessDefinitionStore = new(FakeProcessDefinitionStore)
