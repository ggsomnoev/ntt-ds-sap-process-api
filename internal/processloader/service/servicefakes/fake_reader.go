// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processloader/service"
)

type FakeReader struct {
	GetProcessNameFromFileStub        func(string) (string, error)
	getProcessNameFromFileMutex       sync.RWMutex
	getProcessNameFromFileArgsForCall []struct {
		arg1 string
	}
	getProcessNameFromFileReturns struct {
		result1 string
		result2 error
	}
	getProcessNameFromFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReadYAMLFilesStub        func() ([]string, error)
	readYAMLFilesMutex       sync.RWMutex
	readYAMLFilesArgsForCall []struct {
	}
	readYAMLFilesReturns struct {
		result1 []string
		result2 error
	}
	readYAMLFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) GetProcessNameFromFile(arg1 string) (string, error) {
	fake.getProcessNameFromFileMutex.Lock()
	ret, specificReturn := fake.getProcessNameFromFileReturnsOnCall[len(fake.getProcessNameFromFileArgsForCall)]
	fake.getProcessNameFromFileArgsForCall = append(fake.getProcessNameFromFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetProcessNameFromFileStub
	fakeReturns := fake.getProcessNameFromFileReturns
	fake.recordInvocation("GetProcessNameFromFile", []interface{}{arg1})
	fake.getProcessNameFromFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetProcessNameFromFileCallCount() int {
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	return len(fake.getProcessNameFromFileArgsForCall)
}

func (fake *FakeReader) GetProcessNameFromFileCalls(stub func(string) (string, error)) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = stub
}

func (fake *FakeReader) GetProcessNameFromFileArgsForCall(i int) string {
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	argsForCall := fake.getProcessNameFromFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) GetProcessNameFromFileReturns(result1 string, result2 error) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = nil
	fake.getProcessNameFromFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetProcessNameFromFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.getProcessNameFromFileMutex.Lock()
	defer fake.getProcessNameFromFileMutex.Unlock()
	fake.GetProcessNameFromFileStub = nil
	if fake.getProcessNameFromFileReturnsOnCall == nil {
		fake.getProcessNameFromFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getProcessNameFromFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ReadYAMLFiles() ([]string, error) {
	fake.readYAMLFilesMutex.Lock()
	ret, specificReturn := fake.readYAMLFilesReturnsOnCall[len(fake.readYAMLFilesArgsForCall)]
	fake.readYAMLFilesArgsForCall = append(fake.readYAMLFilesArgsForCall, struct {
	}{})
	stub := fake.ReadYAMLFilesStub
	fakeReturns := fake.readYAMLFilesReturns
	fake.recordInvocation("ReadYAMLFiles", []interface{}{})
	fake.readYAMLFilesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) ReadYAMLFilesCallCount() int {
	fake.readYAMLFilesMutex.RLock()
	defer fake.readYAMLFilesMutex.RUnlock()
	return len(fake.readYAMLFilesArgsForCall)
}

func (fake *FakeReader) ReadYAMLFilesCalls(stub func() ([]string, error)) {
	fake.readYAMLFilesMutex.Lock()
	defer fake.readYAMLFilesMutex.Unlock()
	fake.ReadYAMLFilesStub = stub
}

func (fake *FakeReader) ReadYAMLFilesReturns(result1 []string, result2 error) {
	fake.readYAMLFilesMutex.Lock()
	defer fake.readYAMLFilesMutex.Unlock()
	fake.ReadYAMLFilesStub = nil
	fake.readYAMLFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ReadYAMLFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.readYAMLFilesMutex.Lock()
	defer fake.readYAMLFilesMutex.Unlock()
	fake.ReadYAMLFilesStub = nil
	if fake.readYAMLFilesReturnsOnCall == nil {
		fake.readYAMLFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.readYAMLFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProcessNameFromFileMutex.RLock()
	defer fake.getProcessNameFromFileMutex.RUnlock()
	fake.readYAMLFilesMutex.RLock()
	defer fake.readYAMLFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Reader = new(FakeReader)
