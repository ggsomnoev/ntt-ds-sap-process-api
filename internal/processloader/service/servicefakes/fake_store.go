// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/ntt-ds-sap-process-api/internal/processloader/service"
)

type FakeStore struct {
	SaveProcessDefinitionMetaStub        func(context.Context, string, string) error
	saveProcessDefinitionMetaMutex       sync.RWMutex
	saveProcessDefinitionMetaArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	saveProcessDefinitionMetaReturns struct {
		result1 error
	}
	saveProcessDefinitionMetaReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) SaveProcessDefinitionMeta(arg1 context.Context, arg2 string, arg3 string) error {
	fake.saveProcessDefinitionMetaMutex.Lock()
	ret, specificReturn := fake.saveProcessDefinitionMetaReturnsOnCall[len(fake.saveProcessDefinitionMetaArgsForCall)]
	fake.saveProcessDefinitionMetaArgsForCall = append(fake.saveProcessDefinitionMetaArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.SaveProcessDefinitionMetaStub
	fakeReturns := fake.saveProcessDefinitionMetaReturns
	fake.recordInvocation("SaveProcessDefinitionMeta", []interface{}{arg1, arg2, arg3})
	fake.saveProcessDefinitionMetaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) SaveProcessDefinitionMetaCallCount() int {
	fake.saveProcessDefinitionMetaMutex.RLock()
	defer fake.saveProcessDefinitionMetaMutex.RUnlock()
	return len(fake.saveProcessDefinitionMetaArgsForCall)
}

func (fake *FakeStore) SaveProcessDefinitionMetaCalls(stub func(context.Context, string, string) error) {
	fake.saveProcessDefinitionMetaMutex.Lock()
	defer fake.saveProcessDefinitionMetaMutex.Unlock()
	fake.SaveProcessDefinitionMetaStub = stub
}

func (fake *FakeStore) SaveProcessDefinitionMetaArgsForCall(i int) (context.Context, string, string) {
	fake.saveProcessDefinitionMetaMutex.RLock()
	defer fake.saveProcessDefinitionMetaMutex.RUnlock()
	argsForCall := fake.saveProcessDefinitionMetaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeStore) SaveProcessDefinitionMetaReturns(result1 error) {
	fake.saveProcessDefinitionMetaMutex.Lock()
	defer fake.saveProcessDefinitionMetaMutex.Unlock()
	fake.SaveProcessDefinitionMetaStub = nil
	fake.saveProcessDefinitionMetaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) SaveProcessDefinitionMetaReturnsOnCall(i int, result1 error) {
	fake.saveProcessDefinitionMetaMutex.Lock()
	defer fake.saveProcessDefinitionMetaMutex.Unlock()
	fake.SaveProcessDefinitionMetaStub = nil
	if fake.saveProcessDefinitionMetaReturnsOnCall == nil {
		fake.saveProcessDefinitionMetaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveProcessDefinitionMetaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveProcessDefinitionMetaMutex.RLock()
	defer fake.saveProcessDefinitionMetaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Store = new(FakeStore)
